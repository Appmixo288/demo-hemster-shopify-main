{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport * as authService from \"../../services/authService\";\nimport { FormLayout, Popover, ColorPicker, TextField, Button, Stack, hsbToHex, Form, ButtonGroup, PageActions, Toast, Loading, rgbString, rgbToHsb, hsbToRgb, TextStyle, Spinner } from '@shopify/polaris';\n\nfunction CartPopup(props) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false); //Button enable/disable-------------------------------------\n\n  const {\n    0: isFirstButtonActive,\n    1: setIsFirstButtonActive\n  } = useState(false);\n  const handleFirstButtonClick = useCallback(() => {\n    if (isFirstButtonActive) return;\n    setIsFirstButtonActive(true);\n  }, [isFirstButtonActive]);\n  const handleSecondButtonClick = useCallback(() => {\n    if (!isFirstButtonActive) return;\n    setIsFirstButtonActive(false);\n  }, [isFirstButtonActive]); //toast \n\n  const {\n    0: active,\n    1: setActive\n  } = useState({\n    isOpen: false,\n    msg: \"\",\n    isErr: false\n  });\n  const toastMarkup = active.isOpen ? /*#__PURE__*/_jsx(Toast, {\n    content: active.msg,\n    onDismiss: () => setActive({\n      isOpen: false,\n      msg: \"\",\n      isErr: false\n    }),\n    error: active.isErr ? true : false\n  }) : null;\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const {\n    0: HeadingfontSize,\n    1: setHeadingFontSize\n  } = useState(\"15\");\n  const {\n    0: ContentfontSize,\n    1: setContentFontSize\n  } = useState(\"15\");\n  const {\n    0: TitlefontSize,\n    1: setTitleFontSize\n  } = useState(\"15\");\n  const {\n    0: popoverActiveHeadingFontColor,\n    1: setPopoverActiveHeadingFontColor\n  } = useState(false);\n  const {\n    0: popoverActiveButtonBGColor,\n    1: setPopoverActiveButtonBGColor\n  } = useState(false);\n  const {\n    0: popoverActiveButtonFontColor,\n    1: setPopoverActiveButtonFontColor\n  } = useState(false);\n  const {\n    0: popoverActiveContentColor,\n    1: setPopoverActiveContentColor\n  } = useState(false);\n  const {\n    0: popoverActiveTitleColor,\n    1: setPopoverActiveTitleColor\n  } = useState(false);\n  const togglePopoverActiveHeadingFontColor = useCallback(() => setPopoverActiveHeadingFontColor(popoverActiveHeadingFontColor => !popoverActiveHeadingFontColor), []);\n  const togglePopoverActiveButtonBGColor = useCallback(() => setPopoverActiveButtonBGColor(popoverActiveButtonBGColor => !popoverActiveButtonBGColor), []);\n  const togglePopoverActiveButtonFontColor = useCallback(() => setPopoverActiveButtonFontColor(popoverActiveButtonFontColor => !popoverActiveButtonFontColor), []);\n  const togglePopoverActiveContentColor = useCallback(() => setPopoverActiveContentColor(popoverActiveContentColor => !popoverActiveContentColor), []);\n  const togglePopoverActiveTitleColor = useCallback(() => setPopoverActiveTitleColor(popoverActiveTitleColor => !popoverActiveTitleColor), []);\n  const {\n    0: HeadingFontColor,\n    1: setHeadingFontColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const {\n    0: ContentColor,\n    1: setContentColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const {\n    0: TitleColor,\n    1: setTitleColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const {\n    0: ButtonBGColor,\n    1: setButtonBGColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const {\n    0: ButtonFontColor,\n    1: setButtonFontColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const rgbaColorButtonFontColor = rgbString(hsbToRgb(ButtonFontColor));\n  const rgbaColorButtonBGColor = rgbString(hsbToRgb(ButtonBGColor));\n  const rgbaColorFontColor = rgbString(hsbToRgb(HeadingFontColor));\n  const rgbaColorContentColor = rgbString(hsbToRgb(ContentColor));\n  const rgbaColorTitleColor = rgbString(hsbToRgb(TitleColor));\n\n  const handleHeadingFontColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setHeadingFontColorHexColor(hexColor);\n    setHeadingFontColor(value);\n  };\n\n  const handleButtonBGColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setButtonBGColorHexColor(hexColor);\n    setButtonBGColor(value);\n  };\n\n  const handleButtonFontColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setButtonFontColorHexColor(hexColor);\n    setButtonFontColor(value);\n  };\n\n  const handleContentColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setContentColorHexColor(hexColor);\n    setContentColor(value);\n  };\n\n  const handleTitleColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setTitleColorHexColor(hexColor);\n    setTitleColor(value);\n  };\n\n  const {\n    0: HeadingFontColorHexColor,\n    1: setHeadingFontColorHexColor\n  } = useState(hsbToHex(HeadingFontColor));\n  const {\n    0: ButtonBGColorHexColor,\n    1: setButtonBGColorHexColor\n  } = useState(hsbToHex(ButtonBGColor));\n  const {\n    0: ButtonFontColorHexColor,\n    1: setButtonFontColorHexColor\n  } = useState(hsbToHex(ButtonFontColor));\n  const {\n    0: ContentColorHexColor,\n    1: setContentColorHexColor\n  } = useState(hsbToHex(ContentColor));\n  const {\n    0: TitleColorHexColor,\n    1: setTitleColorHexColor\n  } = useState(hsbToHex(TitleColor));\n\n  const handleHeadingFontColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setHeadingFontColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setHeadingFontColor(hsba);\n      }\n    }\n  };\n\n  const handleContentColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setContentColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setContentColor(hsba);\n      }\n    }\n  };\n\n  const handleTitleColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setTitleColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setTitleColor(hsba);\n      }\n    }\n  };\n\n  const handleButtonBGColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setButtonBGColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setButtonBGColor(hsba);\n      }\n    }\n  };\n\n  const handleButtonFontColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setButtonFontColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setButtonFontColor(hsba);\n      }\n    }\n  };\n\n  const hexToRgb = hex => {\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      red: parseInt(result[1], 16),\n      green: parseInt(result[2], 16),\n      blue: parseInt(result[3], 16)\n    } : {\n      red: 0,\n      green: 0,\n      blue: 0\n    };\n  };\n\n  const activatorHeadingFontColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Heading Font Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveHeadingFontColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorFontColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: HeadingFontColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  const activatorContentColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Content Font Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveContentColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorContentColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: ContentColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  const activatorTitleColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Title Font Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveTitleColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorTitleColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: TitleColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  const activatorButtonFontColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Button Font Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveButtonFontColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorButtonFontColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: ButtonFontColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  const activatorButtonBGColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Button background Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveButtonBGColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorButtonBGColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: ButtonBGColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  useEffect(() => {\n    getProductSettings();\n  }, []);\n\n  function getProductSettings() {\n    setIsLoading(true);\n    authService.getSettingCartPopup().then(response => {\n      setIsLoading(false);\n\n      if (response && response.data && response.data.status === \"success\") {\n        if (response.data.data) {\n          const {\n            isEnable\n          } = response.data.data; // const { headingFontColor, headingFontSize, titleFontColor, titleFontSize, contentFontColor, contentFontSize, buttonFontColor, buttonBackgroundColor, isEnable } = response.data.data;\n          // headingFontColor && handleHeadingFontColorHexColorChange(headingFontColor);\n          // headingFontSize && setHeadingFontSize((headingFontSize).toString());\n          // titleFontColor && handleTitleColorHexColorChange(titleFontColor);\n          // titleFontSize && setTitleFontSize((titleFontSize).toString());\n          // contentFontColor && handleContentColorHexColorChange(contentFontColor);\n          // contentFontSize && setContentFontSize((contentFontSize).toString());\n          // buttonFontColor && handleButtonFontColorHexColorChange(buttonFontColor);\n          // buttonBackgroundColor && handleButtonBGColorHexColorChange(buttonBackgroundColor);\n\n          isEnable ? setIsFirstButtonActive(true) : setIsFirstButtonActive(false);\n        }\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Get Setting details error !\",\n          isErr: true\n        });\n      }\n    }).catch(err => {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Get Setting details error !\",\n        isErr: true\n      });\n      console.log(\"ERROR: \", err);\n    });\n  }\n\n  function handleProductSettingSave() {\n    setIsLoading(true);\n    const data = {\n      // \"headingFontColor\": HeadingFontColorHexColor,\n      // \"headingFontSize\": parseInt(HeadingfontSize),\n      // \"titleFontColor\": TitleColorHexColor,\n      // \"titleFontSize\": parseInt(TitlefontSize),\n      // \"contentFontColor\": ContentColorHexColor,\n      // \"contentFontSize\": ContentfontSize,\n      // \"buttonFontColor\": ButtonFontColorHexColor,\n      // \"buttonBackgroundColor\": ButtonBGColorHexColor,\n      \"isEnable\": isFirstButtonActive\n    };\n    authService.assignSettingCartPopup(data).then(response => {\n      setIsLoading(false);\n\n      if (response && response.data && response.data.status === \"success\") {\n        setActive({\n          isOpen: true,\n          msg: \"Successfully saved.\",\n          isErr: false\n        });\n        getProductSettings();\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Something went wrong! Please try again.\",\n          isErr: true\n        });\n      }\n    }).catch(err => {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Something went wrong! Please try again.\",\n        isErr: true\n      });\n      console.log(\"ERROR\", err);\n    });\n  }\n\n  ;\n  let cartpopUp = `\n    <div id=\"hemster-installation-modal\" class=\"modal\">\n    <div class=\"modal-content\">\n        <div class=\"header\" style=\"padding: 23px; padding-bottom: 0; height:53px;\">\n        <span class=\"close\" onclick=\"document.getElementById('hemster-installation-modal').classList.remove('is_open')\">\n            <div style=\"font-size: 18px;font-weight: 600;color: #1F1E2C;\">X</div>\n        </span>\n        </div>\n        <div style=\"color: #1F1E2C; text-align: center; font-family: Montserrat, sans-serif; font-style: normal; font-weight: normal;font-size: 40px;line-height: 48px;font-feature-settings: 'pnum' on, 'lnum' on;\">\n                Get free tailoring!\n        </div>\n        <div class=\"grid\" style=\"padding-top: 44px; margin-left: 0;display:flex\">\n            <div class=\"grid__item image\" style=\"width:343px;margin: 0 48px 48px 48px;background: url(https://merchant.hemster.co/faherty/hemster_installation_image.jpg);height: 380px;padding-left: 0;background-size: cover;\"></div>\n              <div class=\"grid__item details\" style=\"width:356px; padding: 30px 48px 80px 0;\">\n              <h2 style=\"color: #1F1E2C; text-align: start; font-size: 18px;font-weight: bold; font-family: Montserrat, sans-serif;font-style: normal;line-height: 24px;letter-spacing: 0.2em;text-transform: uppercase;font-feature-settings: 'pnum' on, 'lnum' on;\"> \n                  Hemster FitKit\n                  <br>\n                 <span style=\"color: #B4B4B6; font-style: normal;font-weight: bold;font-size: 14px;line-height: 20px;\">Free</span>\n                 </h2>\n              <p style=\"margin-top: 15px;margin-bottom:32px;font-family: Montserrat, sans-serif;font-style: normal;font-weight: normal;font-size: 16px;line-height: 24px;font-feature-settings: 'pnum' on, 'lnum' on;color: #1F1E2C;\">\n                  Tailor your new garments to your perfect fit for free. Simply add a Hemster FitKit to your order and <span style=\"text-decoration-line: underline;font-weight: bold;cursor:pointer;\">book an appointment</span> with one of the Hemster’s fit experts.\n                  </p>\n              <input type=\"hidden\" name=\"id\" value=\"31652105355333\" />\n              <input type=\"hidden\" id=\"quantity\" name=\"quantity\" value=\"1\"/>\n                \n              <div style=\"display: flex;justify-content: space-between;\">\n                    <input type=\"submit\" value=\"Add to cart\" class=\"btn\" style=\"background: #212E47; width:48%; height:44px;color:#fff;border: none;cursor:pointer;letter-spacing: 2px; font-size: 15px;\" />\n                    <input type=\"submit\" value=\"Learn more\" class=\"btn\" style=\"background: #212E47; width:48%; height:44px;color:#fff;border: none;cursor:pointer;letter-spacing: 2px;font-size: 15px;\" />\n              </div>\n\n              <div style=\"text-align:center;padding-top:18px;\" onclick=\"document.getElementById('hemster-installation-modal').classList.remove('is_open')\">\n                    <span style=\"font-size: 16px;line-height: 24px;text-decoration-line: underline;font-feature-settings: 'pnum' on, 'lnum' on;color: #838386;cursor:pointer;\">No, I don’t want free tailoring</span>\n              </div>\n            </div>\n        </div>\n      \n  </div>\n\n</div>\n\n<style>\n/* The Modal (background) */\n#hemster-installation-modal.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 99999; /* Sit on top */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  opacity: 1;\n}\n\n#hemster-installation-modal.modal.is_open {\n  display: block;\n}\n\n/* Modal Content/Box */\n#hemster-installation-modal > .modal-content {\n  background-color: #FFFFFF;\n  margin: 5% auto; /* 15% from the top and centered */\n  border-radius: 8px;\n  width: 800px; /* Could be more or less, depending on screen size */\n}\n\n/* The Close Button */\n#hemster-installation-modal .close {\n  color: #B4B4B6;\n  float: right;\n  font-size: 12px;\n}\n\n#hemster-installation-modal .close:hover,\n#hemster-installation-modal .close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n@media only screen and (max-width: 480px) {\n  #hemster-installation-modal .grid__item.image {\n    height: 250px !important;\n  }\n  .grid{\n      display:block !important;\n  }\n}\n@media only screen and (max-width: 830px) {\n  #hemster-installation-modal > .modal-content {\n    width: 80% !important; \n  }\n  \n  #hemster-installation-modal .grid__item.image {\n    width: calc(100% - 96px) !important;\n  }\n  \n  #hemster-installation-modal .grid__item.details {\n    padding: 0px 48px 48px 48px !important; \n    width: 100% !important; \n  }\n\n  .grid{\n    display:block !important;\n  }\n}\n</style>`;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), isLoading ? /*#__PURE__*/_jsx(\"div\", {\n      className: \"setting-spinner\",\n      children: /*#__PURE__*/_jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\"\n      })\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsx(FormLayout, {\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"popup-settings\",\n            children: [/*#__PURE__*/_jsx(TextStyle, {\n              children: \"Cart PopUp status\"\n            }), /*#__PURE__*/_jsx(FormLayout.Group, {\n              children: /*#__PURE__*/_jsxs(ButtonGroup, {\n                segmented: true,\n                children: [/*#__PURE__*/_jsx(Button, {\n                  pressed: isFirstButtonActive,\n                  onClick: handleFirstButtonClick,\n                  children: \"Enable\"\n                }), /*#__PURE__*/_jsx(Button, {\n                  pressed: !isFirstButtonActive,\n                  onClick: handleSecondButtonClick,\n                  children: \"Disable\"\n                })]\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(FormLayout, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                cursor: \"pointer\",\n                textDecoration: \"underline\"\n              },\n              onClick: () => {\n                document.getElementById(\"hemster-installation-modal\").classList.add(\"is_open\");\n              },\n              children: \"Click here for Preview\"\n            }), /*#__PURE__*/_jsx(\"br\", {})]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: cartpopUp\n            }\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"action-btns\",\n        children: /*#__PURE__*/_jsx(PageActions, {\n          primaryAction: {\n            content: 'Save',\n            onAction: handleProductSettingSave\n          },\n          secondaryActions: [{\n            content: 'Cancel',\n            destructive: true,\n            onAction: getProductSettings\n          }]\n        })\n      })]\n    }), isLoading && /*#__PURE__*/_jsx(Loading, {}), toastMarkup]\n  });\n}\n\nexport default CartPopup; // import React from 'react';\n// function CartPopup(props) {\n//     return (\n//         <div>\n//             CartPopup settings.....\n//         </div>\n//     );\n// }\n// export default CartPopup;","map":null,"metadata":{},"sourceType":"module"}