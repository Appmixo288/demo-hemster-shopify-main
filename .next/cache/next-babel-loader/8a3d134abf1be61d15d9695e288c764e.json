{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport * as authService from \"../../services/authService\";\nimport { FormLayout, Popover, ColorPicker, TextField, Button, Stack, hsbToHex, Form, RadioButton, PageActions, Toast, Loading, Spinner, rgbString, rgbToHsb, hsbToRgb, TextStyle } from '@shopify/polaris';\n\nfunction ThankYou(props) {\n  //add background color-----------------------------------------\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false); //toast \n\n  const {\n    0: active,\n    1: setActive\n  } = useState({\n    isOpen: false,\n    msg: \"\",\n    isErr: false\n  });\n  const toastMarkup = active.isOpen ? /*#__PURE__*/_jsx(Toast, {\n    content: active.msg,\n    onDismiss: () => setActive({\n      isOpen: false,\n      msg: \"\",\n      isErr: false\n    }),\n    error: active.isErr ? true : false\n  }) : null;\n  const {\n    0: type,\n    1: setType\n  } = useState('option1');\n  const handleChangeType = useCallback((_checked, newValue) => setType(newValue), []);\n  const {\n    0: redirectURL,\n    1: setRedirectURL\n  } = useState(\"\");\n  const {\n    0: HeadingfontSize,\n    1: setHeadingFontSize\n  } = useState(\"15\");\n  const {\n    0: ContentfontSize,\n    1: setContentFontSize\n  } = useState(\"15\");\n  const {\n    0: popoverActiveHeadingFontColor,\n    1: setPopoverActiveHeadingFontColor\n  } = useState(false);\n  const {\n    0: popoverActiveButtonBGColor,\n    1: setPopoverActiveButtonBGColor\n  } = useState(false);\n  const {\n    0: popoverActiveButtonFontColor,\n    1: setPopoverActiveButtonFontColor\n  } = useState(false);\n  const {\n    0: popoverActiveContentColor,\n    1: setPopoverActiveContentColor\n  } = useState(false);\n  const {\n    0: popoverActiveBGColor,\n    1: setPopoverActiveBGColor\n  } = useState(false);\n  const togglePopoverActiveHeadingFontColor = useCallback(() => setPopoverActiveHeadingFontColor(popoverActiveHeadingFontColor => !popoverActiveHeadingFontColor), []);\n  const togglePopoverActiveButtonBGColor = useCallback(() => setPopoverActiveButtonBGColor(popoverActiveButtonBGColor => !popoverActiveButtonBGColor), []);\n  const togglePopoverActiveButtonFontColor = useCallback(() => setPopoverActiveButtonFontColor(popoverActiveButtonFontColor => !popoverActiveButtonFontColor), []);\n  const togglePopoverActiveContentColor = useCallback(() => setPopoverActiveContentColor(popoverActiveContentColor => !popoverActiveContentColor), []);\n  const togglePopoverActiveBGColor = useCallback(() => setPopoverActiveBGColor(popoverActiveBGColor => !popoverActiveBGColor), []);\n  const {\n    0: HeadingFontColor,\n    1: setHeadingFontColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const {\n    0: ContentColor,\n    1: setContentColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const {\n    0: ButtonBGColor,\n    1: setButtonBGColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const {\n    0: ButtonFontColor,\n    1: setButtonFontColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const {\n    0: BGColor,\n    1: setBGColor\n  } = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  });\n  const rgbaColorButtonFontColor = rgbString(hsbToRgb(ButtonFontColor));\n  const rgbaColorButtonBGColor = rgbString(hsbToRgb(ButtonBGColor));\n  const rgbaColorFontColor = rgbString(hsbToRgb(HeadingFontColor));\n  const rgbaColorContentColor = rgbString(hsbToRgb(ContentColor));\n  const rgbaColorBGColor = rgbString(hsbToRgb(BGColor));\n\n  const handleHeadingFontColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setHeadingFontColorHexColor(hexColor);\n    setHeadingFontColor(value);\n  };\n\n  const handleButtonBGColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setButtonBGColorHexColor(hexColor);\n    setButtonBGColor(value);\n  };\n\n  const handleButtonFontColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setButtonFontColorHexColor(hexColor);\n    setButtonFontColor(value);\n  };\n\n  const handleContentColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setContentColorHexColor(hexColor);\n    setContentColor(value);\n  };\n\n  const handleBGColorChange = value => {\n    let hexColor = hsbToHex(value);\n    setBGColorHexColor(hexColor);\n    setBGColor(value);\n  };\n\n  const {\n    0: HeadingFontColorHexColor,\n    1: setHeadingFontColorHexColor\n  } = useState(hsbToHex(HeadingFontColor));\n  const {\n    0: ButtonBGColorHexColor,\n    1: setButtonBGColorHexColor\n  } = useState(hsbToHex(ButtonBGColor));\n  const {\n    0: ButtonFontColorHexColor,\n    1: setButtonFontColorHexColor\n  } = useState(hsbToHex(ButtonFontColor));\n  const {\n    0: ContentColorHexColor,\n    1: setContentColorHexColor\n  } = useState(hsbToHex(ContentColor));\n  const {\n    0: BGColorHexColor,\n    1: setBGColorHexColor\n  } = useState(hsbToHex(BGColor));\n\n  const handleHeadingFontColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setHeadingFontColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setHeadingFontColor(hsba);\n      }\n    }\n  };\n\n  const handleContentColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setContentColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setContentColor(hsba);\n      }\n    }\n  };\n\n  const handleButtonBGColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setButtonBGColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setButtonBGColor(hsba);\n      }\n    }\n  };\n\n  const handleButtonFontColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setButtonFontColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setButtonFontColor(hsba);\n      }\n    }\n  };\n\n  const handleBGColorHexColorChange = value => {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setBGColorHexColor(value);\n\n      if (value.length === 7) {\n        let rgbValue = hexToRgb(value);\n        let hsba = rgbToHsb(rgbValue);\n        setBGColor(hsba);\n      }\n    }\n  };\n\n  const hexToRgb = hex => {\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      red: parseInt(result[1], 16),\n      green: parseInt(result[2], 16),\n      blue: parseInt(result[3], 16)\n    } : {\n      red: 0,\n      green: 0,\n      blue: 0\n    };\n  };\n\n  const activatorHeadingFontColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Heading Font Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveHeadingFontColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorFontColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: HeadingFontColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  const activatorContentColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Content Font Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveContentColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorContentColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: ContentColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  const activatorButtonFontColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Button Font Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveButtonFontColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorButtonFontColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: ButtonFontColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  const activatorButtonBGColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Button background Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveButtonBGColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorButtonBGColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: ButtonBGColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  const activatorBGColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Background Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveBGColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorBGColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: BGColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  useEffect(() => {\n    getProductSettings();\n  }, []);\n\n  function getProductSettings() {\n    setIsLoading(true);\n    authService.getSettingThankYou().then(response => {\n      setIsLoading(false);\n\n      if (response && response.data && response.data.status === \"success\") {\n        if (response.data.data) {\n          // const { displayType, headingFontColor, headingFontSize, contentFontColor, contentFontSize, buttonFontColor, buttonBackgroundColor, backgroundColor } = response.data.data;\n          const {\n            displayType,\n            redirectURL\n          } = response.data.data;\n          displayType && setType(displayType);\n          redirectURL && setRedirectURL(redirectURL); // headingFontColor && handleHeadingFontColorHexColorChange(headingFontColor);\n          // headingFontSize && setHeadingFontSize((headingFontSize).toString());\n          // contentFontColor && handleContentColorHexColorChange(contentFontColor);\n          // contentFontSize && setContentFontSize((contentFontSize).toString());\n          // buttonFontColor && handleButtonFontColorHexColorChange(buttonFontColor);\n          // buttonBackgroundColor && handleButtonBGColorHexColorChange(buttonBackgroundColor);\n          // backgroundColor && handleBGColorHexColorChange(backgroundColor);\n        }\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Get Setting details error !\",\n          isErr: true\n        });\n      }\n    }).catch(err => {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Get Setting details error !\",\n        isErr: true\n      });\n      console.log(\"ERROR: \", err);\n    });\n  }\n\n  function handleProductSettingSave() {\n    setIsLoading(true);\n    const data = {\n      displayType: type,\n      redirectURL // \"headingFontColor\": HeadingFontColorHexColor,\n      // \"headingFontSize\": parseInt(HeadingfontSize),\n      // \"contentFontColor\": ContentColorHexColor,\n      // \"contentFontSize\": parseInt(ContentfontSize),\n      // \"buttonFontColor\": ButtonFontColorHexColor,\n      // \"buttonBackgroundColor\": ButtonBGColorHexColor,\n      // \"backgroundColor\": BGColorHexColor\n\n    };\n    authService.assignSettingThankYou(data).then(response => {\n      setIsLoading(false);\n\n      if (response && response.data && response.data.status === \"success\") {\n        setActive({\n          isOpen: true,\n          msg: \"Successfully saved.\",\n          isErr: false\n        });\n        getProductSettings();\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Something went wrong! Please try again.\",\n          isErr: true\n        });\n      }\n    }).catch(err => {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Something went wrong! Please try again.\",\n        isErr: true\n      });\n      console.log(\"ERROR\", err);\n    });\n  }\n\n  ; // const previewOption1 = `<img src=\"https://merchant.hemster.co/faherty/checkout_banner.png\"/>`;\n  // const previewOption2 = `<img src=\"https://merchant.hemster.co/faherty/checkout_banner_b.png\"/>`\n\n  const previewOption1 = `<div style=\"width: 60%;height: 216px;background: #F4EEED;border-radius: 4px;font-family: Montserrat, sans-serif;font-feature-settings: 'pnum' on, 'lnum' on;font-size: 16px;\">\n        <div>\n            <div\n                style=\"position:relative;top: 20px;cursor: pointer;font-weight: 600;line-height: 24px;color: #1F1E2C;text-align: center;\">\n\n                <img src=\"${window.location.origin}/hook/assets/thankyou_page.gif\" style=\"height: 60px;/* margin-right: 3px; */\">\n                <div>\n                    <div\n                        style=\"font-family: Canela;font-style: normal;font-weight: normal;font-size: 30px;line-height: 30px;align-items: center;font-feature-settings: 'pnum' on, 'lnum' on;\">\n                        Claim your free tailoring</div>\n                    <div\n                        style=\"font-family: 'Circular-Loom';font-style: normal;font-weight: normal;font-size: 14px;align-items: center;font-feature-settings: 'pnum' on, 'lnum' on;color: #525258;\">\n                        Find your perfect fit today with Hemster.</div>\n                </div>\n                <input type=\"submit\" value=\"GET STARTED\" class=\"btn\"\n                    style=\"background: #212E47;height:44px;color:#fff;border: none;cursor:pointer;padding: 2px 13px;top: 11px;font-size: 11px;letter-spacing: 2px;margin: 5px;max-width: fit-content;\">\n            </div>\n        </div>\n    </div>`;\n  const previewOption2 = `<style>\n        .ty-main{\n            width: 60%;height: 104px;background: #F4EEED;border-radius: 4px;font-family: Montserrat, sans-serif;font-feature-settings: 'pnum' on, 'lnum' on;font-size: 16px;\n        }\n        .ty-inner{\n            position:relative;left: 9px;display: flex;top: 22px;cursor: pointer;font-weight: 600;line-height: 24px;color: #1F1E2C;\n        }\n        .ty-image{\n            height: 60px;margin-right: 3px;\n        }\n        .ty-image-inner{\n            position: absolute;left: 70px;top: 0px;\n        }\n        .ty-text{\n            font-family: Canela;font-style: normal;font-weight: normal;font-size: 22.5px;line-height: 32px;display: flex;align-items: center;font-feature-settings: 'pnum' on, 'lnum' on;\n        }\n        .ty-text-sub{\n        font-family: 'Circular-Loom';font-style: normal;font-weight: normal;font-size: 14px;display: flex;align-items: center;font-feature-settings: 'pnum' on, 'lnum' on;color: #525258;\n        }\n        .ty-button{\n            background: #212E47;height:44px;color:#fff;border: none;cursor:pointer;position: absolute;right: 24px;padding: 2px 13px;top: 11px;font-size: 11px;letter-spacing: 2px;\n        }\n        @media only screen and (max-width: 768px) {\n            .ty-main {\n                height: 221px;\n                text-align:center;  \n            }\n            .ty-text{\n                display: block;\n            }\n            .ty-text-sub{\n                display: block;\n            }\n            .ty-inner {\n                display: block;\n                position: relative;\n                left: unset;\n            }\n            .ty-image-inner{\n                position: unset;\n                width: fit-content;\n                margin: auto;\n            }\n            .ty-button {\n                position: unset;\n                margin-top: 10px;\n                padding: 2px 13px;\n                max-width: fit-content;\n            }\n        }\n        </style>\n        <div class=\"ty-main\">\n        <div>\n            <div\n                class=\"ty-inner\">\n                <img class=\"ty-image\" src=\"${window.location.origin}/hook/assets/thankyou_page.gif\" >\n                <div class=\"ty-image-inner\">\n                    <div class=\"ty-text\">\n                        Don’t forget!\n                    </div>\n                    <div class=\"ty-text-sub\">\n                        Book your free fitting with Hemster today.</div>\n                </div>\n                <input type=\"submit\" value=\"GET STARTED\" class=\"btn ty-button\">\n            </div>\n        </div>\n    </div>`;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), isLoading ? /*#__PURE__*/_jsx(\"div\", {\n      className: \"setting-spinner\",\n      children: /*#__PURE__*/_jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\"\n      })\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsxs(FormLayout, {\n          children: [/*#__PURE__*/_jsx(FormLayout, {\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"ty-url\",\n              children: /*#__PURE__*/_jsx(TextField, {\n                value: redirectURL,\n                label: \"Redirect URL:\",\n                type: \"text\",\n                id: \"url\",\n                onChange: val => setRedirectURL(val)\n              })\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"type-radio\",\n            children: [/*#__PURE__*/_jsx(TextStyle, {\n              children: \"Type:\"\n            }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(Stack, {\n              children: [/*#__PURE__*/_jsx(RadioButton, {\n                label: \"Option 1\",\n                checked: type === 'option1',\n                id: \"option1\",\n                name: \"type\",\n                onChange: handleChangeType\n              }), /*#__PURE__*/_jsx(RadioButton, {\n                label: \"Option 2\",\n                id: \"option2\",\n                name: \"type\",\n                checked: type === 'option2',\n                onChange: handleChangeType\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(FormLayout, {\n          children: [/*#__PURE__*/_jsx(TextStyle, {\n            children: \"Preview:\"\n          }), type === \"option1\" && /*#__PURE__*/_jsx(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: previewOption1\n            }\n          }), type === \"option2\" && /*#__PURE__*/_jsx(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: previewOption2\n            }\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"action-btns\",\n        children: /*#__PURE__*/_jsx(PageActions, {\n          primaryAction: {\n            content: 'Save',\n            onAction: handleProductSettingSave\n          },\n          secondaryActions: [{\n            content: 'Cancel',\n            destructive: true,\n            onAction: getProductSettings\n          }]\n        })\n      })]\n    }), isLoading && /*#__PURE__*/_jsx(Loading, {}), toastMarkup]\n  });\n}\n\nexport default ThankYou;","map":null,"metadata":{},"sourceType":"module"}