{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { Popover, Button, OptionList, Page, Card, TextStyle, Heading, TextField, Checkbox, Frame, Loading, PageActions, Tag, Layout, Toast } from \"@shopify/polaris\";\nimport { ResourcePicker } from \"@shopify/app-bridge-react\";\nimport * as authService from \"../../services/authService\";\n\nfunction AddProducts(props) {\n  function remove1ele(copySelection, index) {\n    // let copySelection = selectedTag;\n    const result = copySelection.slice(0, index).concat(copySelection.slice(index + 1));\n    return result;\n  } //by price\n\n\n  const {\n    0: priceValue,\n    1: setPriceValue\n  } = useState(\"\");\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(false);\n  const handleChangebyPrice = useCallback(newChecked => setChecked(newChecked), []);\n  const handleTextFieldChange = useCallback(value => setPriceValue(value), []); //loading state\n\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isLoadingType,\n    1: setIsLoadingType\n  } = useState(false); //toast\n\n  const {\n    0: active,\n    1: setActive\n  } = useState({\n    isOpen: false,\n    msg: \"\",\n    isErr: false\n  });\n  const toastMarkup = active.isOpen ? /*#__PURE__*/_jsx(Toast, {\n    content: active.msg,\n    onDismiss: () => setActive({\n      isOpen: false,\n      msg: \"\",\n      isErr: false\n    }),\n    error: active.isErr ? true : false\n  }) : null; //list of tags and type\n\n  const {\n    0: tags,\n    1: setTags\n  } = useState([]);\n  const {\n    0: types,\n    1: setTypes\n  } = useState([]);\n  useEffect(() => {\n    setIsLoading(true);\n    setIsLoadingType(true);\n    authService.getTags().then(response => {\n      setIsLoading(false);\n\n      if (response.data && response.data.data && response.data.data.edges && Array.isArray(response.data.data.edges) && response.data.data.edges.length > 0) {\n        const mapped_tags = response.data.data.edges.map(edges => {\n          return {\n            label: edges.node,\n            value: edges.node\n          };\n        });\n        setTags(mapped_tags);\n      }\n    }).catch(err => {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Get tags error !\",\n        isErr: true\n      });\n      console.log(\"Error: \", err);\n    });\n    authService.getTypes().then(response => {\n      setIsLoadingType(false);\n\n      if (response.data && response.data.data && response.data.data.edges && Array.isArray(response.data.data.edges) && response.data.data.edges.length > 0) {\n        const mapped_types = response.data.data.edges.map(edges => {\n          return {\n            label: edges.node,\n            value: edges.node\n          };\n        });\n        setTypes(mapped_types);\n      }\n    }).catch(err => {\n      setIsLoadingType(false);\n      setActive({\n        isOpen: true,\n        msg: \"Get types error !\",\n        isErr: true\n      });\n      console.log(\"Error: \", err);\n    });\n  }, []);\n  useEffect(() => {\n    getInitialProducts();\n  }, []);\n\n  function getInitialProducts() {\n    setIsLoading(true);\n    authService.getAssignFitkit().then(response => {\n      setIsLoading(false);\n\n      if (response.data && response.data.status === \"success\") {\n        if (response.data.data) {\n          const {\n            collections,\n            productIds,\n            tags,\n            productTypes,\n            byPrice,\n            applyByPrice\n          } = response.data.data;\n          collections && Array.isArray(collections) && setSelectedColl(collections);\n          productIds && Array.isArray(productIds) && setSelectedProduct(productIds);\n          tags && Array.isArray(tags) && setSelectedTag(tags);\n          productTypes && Array.isArray(productTypes) && setSelectedType(productTypes);\n          applyByPrice && byPrice && setPriceValue(String(byPrice));\n          setChecked(applyByPrice ? true : false);\n        }\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Get product details error !\",\n          isErr: true\n        });\n      }\n    }).catch(err => {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Get product details error !\",\n        isErr: true\n      });\n      console.log(\"Error: \", err);\n    });\n  } //tag\n\n\n  const {\n    0: popoverActiveTag,\n    1: setPopoverActiveTag\n  } = useState(false);\n  const {\n    0: selectedTag,\n    1: setSelectedTag\n  } = useState([]);\n  const togglePopoverActiveTag = useCallback(() => setPopoverActiveTag(popoverActiveTag => !popoverActiveTag), []);\n\n  const activatorTag = /*#__PURE__*/_jsx(Button, {\n    onClick: togglePopoverActiveTag,\n    disclosure: true,\n    children: \"Product Tags\"\n  });\n\n  function removeSelectedTag(index) {\n    let updatedRes = remove1ele(selectedTag, index);\n    setSelectedTag(updatedRes);\n  }\n\n  const displaySelectedTags = selectedTag && Array.isArray(selectedTag) && selectedTag.length > 0 && selectedTag.map((selectedTag, i) => {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"custom-tag\",\n      children: /*#__PURE__*/_jsx(Tag, {\n        onRemove: () => removeSelectedTag(i),\n        children: selectedTag\n      })\n    }, i);\n  }); //type\n\n  const {\n    0: popoverActiveType,\n    1: setPopoverActiveType\n  } = useState(false);\n  const {\n    0: selectedType,\n    1: setSelectedType\n  } = useState([]);\n  const togglePopoverActiveType = useCallback(() => setPopoverActiveType(popoverActiveType => !popoverActiveType), []);\n\n  const activatorType = /*#__PURE__*/_jsx(Button, {\n    onClick: togglePopoverActiveType,\n    disclosure: true,\n    children: \"Product Types\"\n  });\n\n  function removeSelectedType(index) {\n    let updatedRes = remove1ele(selectedType, index);\n    setSelectedType(updatedRes);\n  }\n\n  const displaySelectedTypes = selectedType && Array.isArray(selectedType) && selectedType.length > 0 && selectedType.map((selectedType, i) => {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"custom-tag\",\n      children: /*#__PURE__*/_jsx(Tag, {\n        onRemove: () => removeSelectedType(i),\n        children: selectedType\n      })\n    }, i);\n  }); //product\n\n  const {\n    0: isOpenProduct,\n    1: setIsOpenProduct\n  } = useState(false);\n  const {\n    0: selectedProduct,\n    1: setSelectedProduct\n  } = useState([]);\n\n  function handleSelectedProduct(selected) {\n    const selctedColl = selected.selection && Array.isArray(selected.selection) && selected.selection.length > 0 ? selected.selection.map(selection => {\n      return selection.id;\n    }) : [];\n    setActive({\n      isOpen: true,\n      msg: \"Click on save to update products.\",\n      isErr: false\n    });\n    setSelectedProduct(selctedColl); // setSelectedProduct(selected);\n\n    setIsOpenProduct(false);\n  }\n\n  function removeSelectedProduct(index) {\n    if (index > -1) {\n      let updatedRes = remove1ele(selectedProduct.selection, index);\n      setSelectedProduct(_objectSpread(_objectSpread({}, selectedProduct), {}, {\n        selection: updatedRes\n      }));\n    }\n  }\n\n  const selectProductProducts = selectedProduct && selectedProduct.selection && Array.isArray(selectedProduct.selection) && selectedProduct.selection.length > 0 && selectedProduct.selection.map((selection, i) => {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"custom-tag\",\n      children: /*#__PURE__*/_jsx(Tag, {\n        onRemove: () => removeSelectedProduct(i),\n        children: selection.title\n      })\n    }, i);\n  }); //collection\n\n  const {\n    0: isOpenColl,\n    1: setIsOpenColl\n  } = useState(false);\n  const {\n    0: selectedColl,\n    1: setSelectedColl\n  } = useState([]);\n\n  function handleSelectedColl(selected) {\n    const selctedColl = selected.selection && Array.isArray(selected.selection) && selected.selection.length > 0 ? selected.selection.map(selection => {\n      return selection.id;\n    }) : [];\n    setActive({\n      isOpen: true,\n      msg: \"click on save to update collection.\",\n      isErr: false\n    });\n    setSelectedColl(selctedColl); // setSelectedColl(selected);\n\n    setIsOpenColl(false);\n  }\n\n  function removeSelectedColl(index) {\n    if (index > -1) {\n      let updatedRes = remove1ele(selectedColl.selection, index);\n      setSelectedColl(_objectSpread(_objectSpread({}, selectedColl), {}, {\n        selection: updatedRes\n      }));\n    }\n  }\n\n  const selectProductColl = selectedColl && selectedColl.selection && Array.isArray(selectedColl.selection) && selectedColl.selection.length > 0 && selectedColl.selection.map((selection, i) => {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"custom-tag\",\n      children: /*#__PURE__*/_jsx(Tag, {\n        onRemove: () => removeSelectedColl(i),\n        children: selection.title\n      })\n    }, i);\n  }); //handleAssignFitKit\n\n  function handleAssignFitKit() {\n    setIsLoading(true);\n    const data = {\n      collections: selectedColl && selectedColl,\n      productIds: selectedProduct && selectedProduct,\n      tags: selectedTag && selectedTag,\n      productTypes: selectedType && selectedType,\n      applyByPrice: checked,\n      byPrice: priceValue\n    };\n    authService.assignFitkit(data).then(response => {\n      setIsLoading(false);\n\n      if (response && response.data && response.data.status === \"success\") {\n        setActive({\n          isOpen: true,\n          msg: \"Successfully saved.\",\n          isErr: false\n        });\n        getInitialProducts();\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Something went wrong! Please try again.\",\n          isErr: true\n        });\n      }\n    }).catch(err => {\n      setActive({\n        isOpen: true,\n        msg: \"Something went wrong! Please try again.\",\n        isErr: true\n      });\n      setIsLoading(false);\n      console.log(\"Error\", err);\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"Polaris-Header-Title heading-mar\",\n      children: \"Add FitKit\"\n    }), /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsx(Layout.Section, {\n        oneHalf: true,\n        children: /*#__PURE__*/_jsxs(Card, {\n          sectioned: true,\n          children: [/*#__PURE__*/_jsx(TextStyle, {\n            variation: \"strong\",\n            children: \"Select product to add FitKit\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Button, {\n            onClick: () => setIsOpenProduct(true),\n            children: \"Choose Product\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), isOpenProduct && /*#__PURE__*/_jsx(ResourcePicker, {\n            resourceType: \"Product\",\n            open: true,\n            onSelection: val => {\n              handleSelectedProduct(val);\n            },\n            showVariants: false,\n            allowMultiple: true,\n            onCancel: () => setIsOpenProduct(false),\n            initialSelectionIds: selectedProduct && Array.isArray(selectedProduct) && selectedProduct.length > 0 ? selectedProduct.map(sp => {\n              return {\n                id: sp\n              };\n            }) : []\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Layout.Section, {\n        oneHalf: true,\n        children: /*#__PURE__*/_jsxs(Card, {\n          sectioned: true,\n          children: [/*#__PURE__*/_jsx(TextStyle, {\n            variation: \"strong\",\n            children: \"Select collection to add FitKit\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Button, {\n            onClick: () => setIsOpenColl(true),\n            children: \"Choose Collection\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), isOpenColl && /*#__PURE__*/_jsx(ResourcePicker, {\n            resourceType: \"Collection\",\n            open: true,\n            onSelection: val => {\n              handleSelectedColl(val);\n            },\n            showVariants: false,\n            allowMultiple: true,\n            onCancel: () => setIsOpenColl(false),\n            initialSelectionIds: selectedColl && Array.isArray(selectedColl) && selectedColl.length > 0 ? selectedColl.map(sp => {\n              return {\n                id: sp\n              };\n            }) : []\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Layout.Section, {\n        children: /*#__PURE__*/_jsxs(Card, {\n          sectioned: true,\n          children: [/*#__PURE__*/_jsx(TextStyle, {\n            variation: \"strong\",\n            children: \"Assign FitKit product tag wise\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Popover, {\n            active: popoverActiveTag,\n            activator: activatorTag,\n            onClose: togglePopoverActiveTag,\n            children: /*#__PURE__*/_jsx(OptionList, {\n              title: \"Manage Fitkit product tag wise\",\n              onChange: setSelectedTag,\n              options: tags,\n              selected: selectedTag,\n              allowMultiple: true\n            })\n          }), displaySelectedTags && displaySelectedTags]\n        })\n      }), /*#__PURE__*/_jsx(Layout.Section, {\n        children: /*#__PURE__*/_jsxs(Card, {\n          sectioned: true,\n          children: [/*#__PURE__*/_jsx(TextStyle, {\n            variation: \"strong\",\n            children: \"Assign FitKit product type wise\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Popover, {\n            active: popoverActiveType,\n            activator: activatorType,\n            onClose: togglePopoverActiveType,\n            children: /*#__PURE__*/_jsx(OptionList, {\n              title: \"Manage Fitkit product type wise\",\n              onChange: setSelectedType,\n              options: types,\n              selected: selectedType,\n              allowMultiple: true\n            })\n          }), displaySelectedTypes && displaySelectedTypes]\n        })\n      }), /*#__PURE__*/_jsx(Layout.Section, {\n        children: /*#__PURE__*/_jsxs(Card, {\n          sectioned: true,\n          children: [/*#__PURE__*/_jsx(TextStyle, {\n            variation: \"strong\",\n            children: \"Apply widget by price\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Checkbox, {\n            label: \"Filter by price?\",\n            checked: checked,\n            onChange: handleChangebyPrice,\n            helpText: \"Show the selected options if the price above (X).\"\n          }), \" \", checked && /*#__PURE__*/_jsx(TextField, {\n            type: \"number\",\n            value: priceValue,\n            onChange: handleTextFieldChange\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(Layout.Section, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"action-btns\",\n          children: /*#__PURE__*/_jsx(PageActions, {\n            primaryAction: {\n              disabled: isLoading || isLoadingType,\n              content: \"Save\",\n              onAction: handleAssignFitKit\n            },\n            secondaryActions: [{\n              content: \"Cancel\",\n              destructive: true,\n              onAction: getInitialProducts\n            }]\n          })\n        }), /*#__PURE__*/_jsxs(Frame, {\n          children: [(isLoading || isLoadingType) && /*#__PURE__*/_jsx(Loading, {}), toastMarkup]\n        })]\n      })]\n    })]\n  });\n}\n\nexport default AddProducts;","map":null,"metadata":{},"sourceType":"module"}