{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport { Button, Card, Icon, Page, Banner } from '@shopify/polaris';\nimport FitkitProduct from './FitkitProduct';\nimport AddProducts from './AddProducts';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as AllAction from '../../redux/action/index';\nimport { MobileChevronMajor } from '@shopify/polaris-icons';\nimport * as authService from \"../../services/authService\";\n\nfunction UpsellIndex(props) {\n  const dispatch = useDispatch();\n  const {\n    0: active,\n    1: setActive\n  } = useState(true);\n  useEffect(() => {\n    getAppStatus();\n  }, []);\n  const page_info = useSelector(state => state.allReducer.page_info);\n\n  function handlePage(page) {\n    dispatch(AllAction.pageInfoAction(page));\n  }\n\n  function getAppStatus() {\n    authService.getAppStatus().then(response => {\n      if (response && response.data && response.data.data && response.data.data.shopStatus) {\n        let {\n          isAppEnable\n        } = response.data.data.shopStatus;\n        isAppEnable ? setActive(true) : setActive(false);\n      } else {\n        setActive(false);\n      }\n    }).catch(err => {\n      console.log(\"ERROR: \", err);\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(Page, {\n    children: [active === false && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Banner, {\n        title: \"Current app status is disabled.\",\n        status: \"critical\",\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: \"To enable it go to app settings, Click on Enable button.\"\n        })\n      }), /*#__PURE__*/_jsx(\"br\", {})]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsx(AddProducts, {})\n    })]\n  });\n}\n\nexport default UpsellIndex;","map":null,"metadata":{},"sourceType":"module"}