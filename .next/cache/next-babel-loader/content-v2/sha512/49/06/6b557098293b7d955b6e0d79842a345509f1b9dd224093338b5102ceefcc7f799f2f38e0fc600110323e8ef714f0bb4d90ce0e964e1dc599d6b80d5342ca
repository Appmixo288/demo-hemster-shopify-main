{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport * as authService from \"../../services/authService\";\nimport { FormLayout, Button, Form, ButtonGroup, PageActions, Toast, Loading, TextStyle, Spinner, Select, Popover, OptionList } from \"@shopify/polaris\";\n\nfunction Announcement(props) {\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1]; //Button enable/disable-------------------------------------\n\n\n  var _useState2 = useState(false),\n      isFirstButtonActive = _useState2[0],\n      setIsFirstButtonActive = _useState2[1];\n\n  var handleFirstButtonClick = useCallback(function () {\n    if (isFirstButtonActive) return;\n    setIsFirstButtonActive(true);\n  }, [isFirstButtonActive]);\n  var handleSecondButtonClick = useCallback(function () {\n    if (!isFirstButtonActive) return;\n    setIsFirstButtonActive(false);\n  }, [isFirstButtonActive]); //toast\n\n  var _useState3 = useState({\n    isOpen: false,\n    msg: \"\",\n    isErr: false\n  }),\n      active = _useState3[0],\n      setActive = _useState3[1]; ////////////////////page selection/////////////////\n\n\n  var _useState4 = useState([]),\n      selected = _useState4[0],\n      setSelected = _useState4[1];\n\n  var _useState5 = useState(false),\n      popoverActive = _useState5[0],\n      setPopoverActive = _useState5[1];\n\n  console.log(selected);\n  var togglePopoverActive = useCallback(function () {\n    return setPopoverActive(function (popoverActive) {\n      return !popoverActive;\n    });\n  }, []);\n\n  var activator = /*#__PURE__*/_jsx(Button, {\n    onClick: togglePopoverActive,\n    disclosure: true,\n    children: \"Select Page\"\n  }); //////////////////////////////////////////////////\n\n\n  var toastMarkup = active.isOpen ? /*#__PURE__*/_jsx(Toast, {\n    content: active.msg,\n    onDismiss: function onDismiss() {\n      return setActive({\n        isOpen: false,\n        msg: \"\",\n        isErr: false\n      });\n    },\n    error: active.isErr ? true : false\n  }) : null; // const [selected, setSelected] = useState(\"\");\n  // const handleSelectChange = useCallback((value) => setSelected(value), []);\n\n  var options = [{\n    label: \"Home page\",\n    value: \"home_page\"\n  }, {\n    label: \"Product page\",\n    value: \"product_page\"\n  }, {\n    label: \"Collection page\",\n    value: \"collection_page\"\n  }, {\n    label: \"Collection list\",\n    value: \"collection_list\"\n  }, {\n    label: \"Cart\",\n    value: \"cart_page\"\n  }, {\n    label: \"Checkout\",\n    value: \"checkout_page\"\n  }];\n  useEffect(function () {\n    getABSettings();\n  }, []);\n\n  function getABSettings() {\n    setIsLoading(true);\n    authService.getSettingAB().then(function (response) {\n      setIsLoading(false);\n\n      if (response && response.data && response.data.status === \"success\") {\n        if (response.data.data) {\n          var _response$data$data = response.data.data,\n              isEnable = _response$data$data.isEnable,\n              selected_page = _response$data$data.selected_page;\n          selected_page && setSelected(selected_page);\n          isEnable ? setIsFirstButtonActive(true) : setIsFirstButtonActive(false);\n        }\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Get Setting details error !\",\n          isErr: true\n        });\n      }\n    })[\"catch\"](function (err) {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Get Setting details error !\",\n        isErr: true\n      });\n      console.log(\"ERROR: \", err);\n    });\n  }\n\n  function handleABSettingSave() {\n    setIsLoading(true);\n    var data = {\n      isEnable: isFirstButtonActive,\n      selected_page: selected\n    };\n    authService.assignSettingAB(data).then(function (response) {\n      setIsLoading(false);\n\n      if (response && response.data && response.data.status === \"success\") {\n        setActive({\n          isOpen: true,\n          msg: \"Successfully saved.\",\n          isErr: false\n        });\n        getABSettings();\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Something went wrong! Please try again.\",\n          isErr: true\n        });\n      }\n    })[\"catch\"](function (err) {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Something went wrong! Please try again.\",\n        isErr: true\n      });\n      console.log(\"ERROR\", err);\n    });\n  }\n\n  var cartpopUp = \"<style>\\n    .he-container {\\n        width: 100%;\\n        background: #212E47;\\n        color: #fff;\\n        padding: 5px 0;\\n        display: flex;\\n        justify-content: space-between;\\n    }\\n    .he-text-container {\\n        display: flex;\\n        margin: 0 auto;\\n        padding-top: 2px;\\n    }\\n    .he-text {\\n        margin-right: 7px;\\n        font-size: 14px;\\n        letter-spacing: 3px;\\n        font-family: system-ui;\\n        line-height: 20px;\\n        text-transform: uppercase;\\n    }\\n    .he-lm-button {\\n        background: #F4EEED;\\n        border-radius: 6px;\\n        color: #000;\\n        padding: 3px 10px;\\n        cursor: pointer;\\n        margin-right: 20px;\\n        font-weight: 600;\\n        letter-spacing: 2px;\\n        font-family: system-ui;\\n        vertical-align: top;\\n        font-size: 14px;\\n    }\\n\\n    </style>\\n    \\n    <div class=\\\"he-container\\\">\\n        <div class=\\\"he-text-container\\\">\\n            <div class=\\\"he-text\\\">Get Free tailoring through our partnership with</div>\\n            <span><img src=\\\"\".concat(window.location.origin, \"/hook/assets/union.png\\\" /></span>\\n        </div>\\n        <div class=\\\"he-lm-button\\\">LEARN MORE</div>\\n    </div>\");\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [isLoading ? /*#__PURE__*/_jsx(\"div\", {\n      className: \"setting-spinner\",\n      children: /*#__PURE__*/_jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\"\n      })\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsx(FormLayout, {\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"popup-settings\",\n            children: [/*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(TextStyle, {\n              children: \"Announcement bar status\"\n            }), /*#__PURE__*/_jsx(FormLayout.Group, {\n              children: /*#__PURE__*/_jsxs(ButtonGroup, {\n                segmented: true,\n                children: [/*#__PURE__*/_jsx(Button, {\n                  pressed: isFirstButtonActive,\n                  onClick: handleFirstButtonClick,\n                  children: \"Enable\"\n                }), /*#__PURE__*/_jsx(Button, {\n                  pressed: !isFirstButtonActive,\n                  onClick: handleSecondButtonClick,\n                  children: \"Disable\"\n                })]\n              })\n            }), /*#__PURE__*/_jsx(FormLayout.Group, {\n              children: /*#__PURE__*/_jsx(Popover, {\n                active: popoverActive,\n                activator: activator,\n                onClose: togglePopoverActive,\n                children: /*#__PURE__*/_jsx(OptionList, {\n                  onChange: setSelected,\n                  options: options,\n                  selected: selected,\n                  allowMultiple: true\n                })\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(FormLayout, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            children: \"Preview:\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: cartpopUp\n            }\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"action-btns\",\n        children: /*#__PURE__*/_jsx(PageActions, {\n          primaryAction: {\n            content: \"Save\",\n            onAction: handleABSettingSave\n          },\n          secondaryActions: [{\n            content: \"Cancel\",\n            destructive: true,\n            onAction: getABSettings\n          }]\n        })\n      })]\n    }), isLoading && /*#__PURE__*/_jsx(Loading, {}), toastMarkup]\n  });\n}\n\nexport default Announcement;","map":null,"metadata":{},"sourceType":"module"}