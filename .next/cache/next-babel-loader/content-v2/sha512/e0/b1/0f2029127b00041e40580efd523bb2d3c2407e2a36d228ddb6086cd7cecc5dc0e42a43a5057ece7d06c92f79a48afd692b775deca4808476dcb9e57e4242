{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport App from \"next/app\";\nimport { AppProvider } from \"@shopify/polaris\";\nimport { Provider, useAppBridge } from \"@shopify/app-bridge-react\";\nimport { authenticatedFetch } from \"@shopify/app-bridge-utils\";\nimport \"@shopify/polaris/dist/styles.css\";\nimport translations from \"@shopify/polaris/locales/en.json\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport store from \"../client/redux/store\";\nimport \"../client/Css/FitKit.css\";\n\nfunction MyProvider(props) {\n  const app = useAppBridge();\n  const client = new ApolloClient({\n    fetch: authenticatedFetch(app),\n    fetchOptions: {\n      credentials: \"include\"\n    }\n  });\n  const Component = props.Component;\n  return /*#__PURE__*/_jsx(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsx(Component, _objectSpread({}, props))\n  });\n}\n\nclass MyApp extends App {\n  componentDidMount() {\n    if (true) {\n      window.host = this.props.host;\n      window.shop = this.props.shop;\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      host,\n      shop\n    } = this.props;\n    console.log(\"_app.js\", API_KEY, host, shop);\n    return /*#__PURE__*/_jsx(ReduxProvider, {\n      store: store,\n      children: /*#__PURE__*/_jsx(AppProvider, {\n        i18n: translations,\n        children: /*#__PURE__*/_jsx(Provider, {\n          config: {\n            apiKey: API_KEY,\n            host,\n            forceRedirect: true\n          },\n          children: /*#__PURE__*/_jsx(MyProvider, _objectSpread({\n            Component: Component\n          }, pageProps))\n        })\n      })\n    });\n  }\n\n}\n\nMyApp.getInitialProps = async ({\n  ctx\n}) => {\n  return {\n    host: ctx.query.host,\n    shop: ctx.query.shop\n  };\n};\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}