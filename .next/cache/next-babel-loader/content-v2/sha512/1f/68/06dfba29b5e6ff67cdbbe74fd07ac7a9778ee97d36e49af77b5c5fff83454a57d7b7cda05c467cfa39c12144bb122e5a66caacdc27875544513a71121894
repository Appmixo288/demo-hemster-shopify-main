{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport * as authService from \"../../services/authService\";\nimport { FormLayout, Stack, Form, RadioButton, PageActions, TextStyle, Button, ButtonGroup, Spinner, Toast } from \"@shopify/polaris\";\nexport default function Collection() {\n  //state and handlers\n  //Button enable/disable-------------------------------------\n  const {\n    0: isFirstButtonActive,\n    1: setIsFirstButtonActive\n  } = useState(false);\n  const handleFirstButtonClick = useCallback(() => {\n    if (isFirstButtonActive) return;\n    setIsFirstButtonActive(true);\n  }, [isFirstButtonActive]);\n  const handleSecondButtonClick = useCallback(() => {\n    if (!isFirstButtonActive) return;\n    setIsFirstButtonActive(false);\n  }, [isFirstButtonActive]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false); //toast\n\n  const {\n    0: active,\n    1: setActive\n  } = useState({\n    isOpen: false,\n    msg: \"\",\n    isErr: false\n  });\n  const toastMarkup = active.isOpen ? /*#__PURE__*/_jsx(Toast, {\n    content: active.msg,\n    onDismiss: () => setActive({\n      isOpen: false,\n      msg: \"\",\n      isErr: false\n    }),\n    error: active.isErr ? true : false\n  }) : null;\n  const {\n    0: type,\n    1: setType\n  } = useState(\"option1\");\n  const handleChangeType = useCallback((_checked, newValue) => setType(newValue), []);\n  useEffect(() => {\n    getCollectionSettings();\n  }, []);\n\n  function getCollectionSettings() {\n    setIsLoading(true);\n    authService.getSettingCollection().then(response => {\n      setIsLoading(false);\n\n      if (response && response.data && response.data.status === \"success\") {\n        if (response.data.data) {\n          const {\n            displayType,\n            isEnable\n          } = response.data.data;\n          displayType && setType(displayType);\n          isEnable ? setIsFirstButtonActive(true) : setIsFirstButtonActive(false);\n        }\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Get Setting details error !\",\n          isErr: true\n        });\n      }\n    }).catch(err => {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Get Setting details error !\",\n        isErr: true\n      });\n      console.log(\"ERROR: \", err);\n    });\n  }\n\n  function handleCollectionSettingSave() {\n    setIsLoading(true);\n    const data = {\n      displayType: type,\n      isEnable: isFirstButtonActive\n    };\n    authService.assignSettingCollection(data).then(response => {\n      setIsLoading(false);\n      console.log(\"response assign pro set\", response);\n\n      if (response && response.data && response.data.status === \"success\") {\n        setActive({\n          isOpen: true,\n          msg: \"Successfully saved.\",\n          isErr: false\n        });\n        getCollectionSettings();\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Something went wrong! Please try again.\",\n          isErr: true\n        });\n      }\n    }).catch(err => {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Something went wrong! Please try again.\",\n        isErr: true\n      });\n      console.log(\"ERROR\", err);\n    });\n  }\n\n  const previewOption1 = `<head>\n  <style>\n      @import url('http://fonts.cdnfonts.com/css/sillii-willinn');\n\n      .grid__item-details {\n        background: #F4EEED;\n        font-family: serif;\n        font-size: 16px;\n        width: 278px;\n        padding: 10px 18px;\n        max-height: 116px;\n      }\n\n      .grid {\n          display: flex;\n          cursor: pointer;\n      }\n\n      p.grid-mine-text {\n        font-family: Sillii Willinn;\n        font-size: 41px;\n        transform: rotate(-5deg);\n        margin: 0px 0 !important;\n        padding: 0 !important;\n      }\n\n      .g-text {\n        display: flex;\n        line-height: 48px;\n      }\n\n      .grid-mine-line {\n          width: 80px;\n          height: 0px;\n          margin-top: 35px;\n          margin-left: -82px;\n          border: 1.16419px solid #1F1E2C;\n      }\n\n      .grid-text-2-container {\n          font-family: system-ui;\n      }\n\n      .grid-size {\n          color: #000;\n      }\n\n      .grid-size-text {\n          color: #77777a;\n      }\n\n      .logomark-custom {\n          height: fit-content;\n          margin: auto 0;\n      }\n\n      .grid-text-2 {\n          display: flex;\n          justify-content: space-between;\n      }\n  </style>\n</head>\n<div class=\"grid\">\n  <div>\n      <img src=${type === \"option1\" ? `${window.location.origin}/hook/assets/collection1.png` : type == \"option2\" ? `${window.location.origin}/hook/assets/collection2.png` : `${window.location.origin}/hook/assets/collection3.png`} />\n  </div>\n  <div class=\"grid__item-details\">\n      <div class=\"g-text\">\n          <span style=\"font-size: 40px; margin-right: 15px;\">Make it </span>\n          <p class=\"grid-mine-text\">Mine</p>\n          <p class=\"grid-mine-line\"></p>\n      </div>\n      <div class=\"grid-text-2\">\n          <div class=\"grid-text-2-container\">\n              <div class=\"grid-size\">In between sizes?</div>\n              <div class=\"grid-size-text\">Get it tailored with Hemster.</div>\n          </div>\n          <img class=\"logomark-custom\" src='${window.location.origin}/hook/assets/logomark.png' />\n      </div>\n  </div>\n</div>`;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [\" \", isLoading ? /*#__PURE__*/_jsx(\"div\", {\n      className: \"setting-spinner\",\n      children: /*#__PURE__*/_jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\"\n      })\n    }) : /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"popup-settings\",\n        children: [/*#__PURE__*/_jsx(TextStyle, {\n          children: \"Collection page status\"\n        }), /*#__PURE__*/_jsx(FormLayout.Group, {\n          children: /*#__PURE__*/_jsxs(ButtonGroup, {\n            segmented: true,\n            children: [/*#__PURE__*/_jsx(Button, {\n              pressed: isFirstButtonActive,\n              onClick: handleFirstButtonClick,\n              children: \"Enable\"\n            }), /*#__PURE__*/_jsx(Button, {\n              pressed: !isFirstButtonActive,\n              onClick: handleSecondButtonClick,\n              children: \"Disable\"\n            })]\n          })\n        })]\n      }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsx(FormLayout, {\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"type-radio\",\n            children: [/*#__PURE__*/_jsx(TextStyle, {\n              children: \"Type:\"\n            }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(Stack, {\n              children: [/*#__PURE__*/_jsx(RadioButton, {\n                label: \"Option 1\",\n                checked: type === \"option1\",\n                id: \"option1\",\n                name: \"type\",\n                onChange: handleChangeType\n              }), /*#__PURE__*/_jsx(RadioButton, {\n                label: \"Option 2\",\n                id: \"option2\",\n                name: \"type\",\n                checked: type === \"option2\",\n                onChange: handleChangeType\n              }), /*#__PURE__*/_jsx(RadioButton, {\n                label: \"Option 3\",\n                checked: type === \"option3\",\n                id: \"option3\",\n                name: \"type\",\n                onChange: handleChangeType\n              })]\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(FormLayout, {\n          children: [/*#__PURE__*/_jsx(TextStyle, {\n            children: \"Preview:\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: previewOption1\n            }\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"action-btns\",\n        children: /*#__PURE__*/_jsx(PageActions, {\n          primaryAction: {\n            content: \"Save\",\n            // disabled: isLoading,\n            onAction: handleCollectionSettingSave\n          },\n          secondaryActions: [{\n            content: \"Cancel\",\n            destructive: true,\n            onAction: getCollectionSettings\n          }]\n        })\n      })]\n    }), toastMarkup]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}