{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport * as authService from \"../../services/authService\";\nimport { FormLayout, Popover, ColorPicker, TextField, Button, Stack, hsbToHex, Form, RadioButton, PageActions, Toast, Loading, rgbString, rgbToHsb, hsbToRgb, TextStyle, Spinner, Page, Select, Card } from \"@shopify/polaris\";\n\nfunction Product(props) {\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      isEdit = _useState2[0],\n      setIsEdit = _useState2[1]; //toast\n\n\n  var _useState3 = useState({\n    isOpen: false,\n    msg: \"\",\n    isErr: false\n  }),\n      active = _useState3[0],\n      setActive = _useState3[1];\n\n  var toastMarkup = active.isOpen ? /*#__PURE__*/_jsx(Toast, {\n    content: active.msg,\n    onDismiss: function onDismiss() {\n      return setActive({\n        isOpen: false,\n        msg: \"\",\n        isErr: false\n      });\n    },\n    error: active.isErr ? true : false\n  }) : null;\n\n  var _useState4 = useState(\"option1\"),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var handleChangeType = useCallback(function (_checked, newValue) {\n    return setType(newValue);\n  }, []);\n\n  var _useState5 = useState(\"16\"),\n      fontSize = _useState5[0],\n      setFontSize = _useState5[1];\n\n  var _useState6 = useState(\"16\"),\n      linkSize = _useState6[0],\n      setLinkSize = _useState6[1];\n\n  var _useState7 = useState(false),\n      popoverActiveFontColor = _useState7[0],\n      setPopoverActiveFontColor = _useState7[1];\n\n  var _useState8 = useState(false),\n      popoverActiveLinkColor = _useState8[0],\n      setPopoverActiveLinkColor = _useState8[1];\n\n  var _useState9 = useState(false),\n      popoverActiveBGColor = _useState9[0],\n      setPopoverActiveBGColor = _useState9[1];\n\n  var togglePopoverActiveFontColor = useCallback(function () {\n    return setPopoverActiveFontColor(function (popoverActiveFontColor) {\n      return !popoverActiveFontColor;\n    });\n  }, []);\n  var togglePopoverActiveLinkColor = useCallback(function () {\n    return setPopoverActiveLinkColor(function (popoverActiveLinkColor) {\n      return !popoverActiveLinkColor;\n    });\n  }, []);\n  var togglePopoverActiveCheckBoxColor = useCallback(function () {\n    return setPopoverActiveBGColor(function (popoverActiveBGColor) {\n      return !popoverActiveBGColor;\n    });\n  }, []);\n\n  var _useState10 = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  }),\n      FontColor = _useState10[0],\n      setFontColor = _useState10[1];\n\n  var _useState11 = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  }),\n      LinkColor = _useState11[0],\n      setLinkColor = _useState11[1];\n\n  var _useState12 = useState({\n    hue: 0.0,\n    brightness: 0.0,\n    saturation: 0.0\n  }),\n      BGColor = _useState12[0],\n      setBGColor = _useState12[1];\n\n  var rgbaColorBGColor = rgbString(hsbToRgb(BGColor));\n  var rgbaColorFontColor = rgbString(hsbToRgb(FontColor));\n  var rgbaColorLinkColor = rgbString(hsbToRgb(LinkColor));\n\n  var _useState13 = useState(\"\"),\n      selected = _useState13[0],\n      setSelected = _useState13[1];\n\n  var handleSelectChange = useCallback(function (value) {\n    return setSelected(value);\n  }, []);\n  var options = [{\n    label: 'Times, \"Times New Roman\", serif',\n    value: 'Times, \"Times New Roman\", serif'\n  }, {\n    label: \"Helvetica, Arial, sans-serif\",\n    value: \"Helvetica, Arial, sans-serif\"\n  }, {\n    label: \"serif\",\n    value: \"serif\"\n  }, {\n    label: \"sans-serif\",\n    value: \"sans-serif\"\n  }, {\n    label: \"monospace\",\n    value: \"monospace\"\n  }, {\n    label: \"cursive\",\n    value: \"cursive\"\n  }, {\n    label: \"fantasy\",\n    value: \"fantasy\"\n  }, {\n    label: \"Montserrat, sans-serif\",\n    value: \"Montserrat, sans-serif\"\n  }];\n\n  var handleFontColorChange = function handleFontColorChange(value) {\n    var hexColor = hsbToHex(value);\n    setFontColorHexColor(hexColor);\n    setFontColor(value);\n  };\n\n  var handleLinkColorChange = function handleLinkColorChange(value) {\n    var hexColor = hsbToHex(value);\n    setLinkColorHexColor(hexColor);\n    setLinkColor(value);\n  };\n\n  var handleBGColorChange = function handleBGColorChange(value) {\n    var hexColor = hsbToHex(value);\n    setcheckBoxColorHexColor(hexColor);\n    setBGColor(value);\n  };\n\n  var _useState14 = useState(hsbToHex(FontColor)),\n      FontColorHexColor = _useState14[0],\n      setFontColorHexColor = _useState14[1];\n\n  var _useState15 = useState(hsbToHex(LinkColor)),\n      LinkColorHexColor = _useState15[0],\n      setLinkColorHexColor = _useState15[1];\n\n  var _useState16 = useState(hsbToHex(BGColor)),\n      checkBoxColorHexColor = _useState16[0],\n      setcheckBoxColorHexColor = _useState16[1];\n\n  var handleFontColorHexColorChange = function handleFontColorHexColorChange(value) {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setFontColorHexColor(value);\n\n      if (value.length === 7) {\n        var rgbValue = hexToRgb(value);\n        var hsba = rgbToHsb(rgbValue);\n        setFontColor(hsba);\n      }\n    }\n  };\n\n  var handleLinkColorHexColorChange = function handleLinkColorHexColorChange(value) {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setLinkColorHexColor(value);\n\n      if (value.length === 7) {\n        var rgbValue = hexToRgb(value);\n        var hsba = rgbToHsb(rgbValue);\n        setLinkColor(hsba);\n      }\n    }\n  };\n\n  var handlecheckBoxColorHexColorChange = function handlecheckBoxColorHexColorChange(value) {\n    if (value.charAt(0) === \"#\" && value.length <= 7) {\n      setcheckBoxColorHexColor(value);\n\n      if (value.length === 7) {\n        var rgbValue = hexToRgb(value);\n        var hsba = rgbToHsb(rgbValue);\n        setBGColor(hsba);\n      }\n    }\n  };\n\n  var hexToRgb = function hexToRgb(hex) {\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      red: parseInt(result[1], 16),\n      green: parseInt(result[2], 16),\n      blue: parseInt(result[3], 16)\n    } : {\n      red: 0,\n      green: 0,\n      blue: 0\n    };\n  };\n\n  var activatorFontColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Font Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveFontColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorFontColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: FontColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  var activatorLinkColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"Link Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveLinkColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorLinkColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: LinkColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  var activatorBGColor = /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      children: \"checkbox Color\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        paddingTop: \"3px\"\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: togglePopoverActiveCheckBoxColor,\n        disclosure: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Stack, {\n            spacing: \"tight\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: \"2rem\",\n                width: \"2rem\",\n                borderRadius: \"0.3rem\",\n                background: rgbaColorBGColor\n              }\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: checkBoxColorHexColor\n            })]\n          })\n        })\n      })\n    })]\n  });\n\n  useEffect(function () {\n    getProductSettings();\n  }, []);\n\n  function getProductSettings() {\n    setIsLoading(true);\n    authService.getSettingProduct().then(function (response) {\n      setIsLoading(false);\n\n      if (response && response.data && response.data.status === \"success\") {\n        if (response.data.data) {\n          var _response$data$data = response.data.data,\n              fontColor = _response$data$data.fontColor,\n              _fontSize = _response$data$data.fontSize,\n              checkboxColor = _response$data$data.checkboxColor,\n              fontType = _response$data$data.fontType,\n              linkColor = _response$data$data.linkColor,\n              _linkSize = _response$data$data.linkSize; // const { displayType } = response.data.data;\n          // displayType && setType(displayType);\n\n          fontColor && handleFontColorHexColorChange(fontColor);\n          checkboxColor && handlecheckBoxColorHexColorChange(checkboxColor);\n          _fontSize && setFontSize(_fontSize.toString());\n          fontType && setSelected(fontType);\n          _linkSize && setLinkSize(_linkSize.toString());\n          linkColor && handleLinkColorHexColorChange(linkColor);\n        }\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Get Setting details error !\",\n          isErr: true\n        });\n      }\n    })[\"catch\"](function (err) {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Get Setting details error !\",\n        isErr: true\n      });\n      console.log(\"ERROR: \", err);\n    });\n  }\n\n  function handleProductSettingSave() {\n    setIsLoading(true);\n    var data = {\n      // displayType: type,\n      fontColor: FontColorHexColor,\n      fontSize: parseInt(fontSize),\n      checkboxColor: checkBoxColorHexColor,\n      fontType: selected,\n      linkColor: LinkColorHexColor,\n      linkSize: parseInt(linkSize)\n    };\n    authService.assignSettingProduct(data).then(function (response) {\n      setIsLoading(false);\n      console.log(\"response assign pro set\", response);\n\n      if (response && response.data && response.data.status === \"success\") {\n        setActive({\n          isOpen: true,\n          msg: \"Successfully saved.\",\n          isErr: false\n        });\n        getProductSettings();\n      } else {\n        setActive({\n          isOpen: true,\n          msg: \"Something went wrong! Please try again.\",\n          isErr: true\n        });\n      }\n    })[\"catch\"](function (err) {\n      setIsLoading(false);\n      setActive({\n        isOpen: true,\n        msg: \"Something went wrong! Please try again.\",\n        isErr: true\n      });\n      console.log(\"ERROR\", err);\n    });\n  }\n\n  var previewOption1 = \"<style>\\n        .checkbox {\\n            width: 100%;\\n            position: relative;\\n            display: block;\\n        }\\n        \\n        .checkbox input[type=\\\"checkbox\\\"] {\\n            width: auto;\\n            opacity: 0.00000001;\\n            position: absolute;\\n            left: 0;\\n            margin-left: -20px;\\n        }\\n        .checkbox label {\\n            position: relative;\\n        }\\n        .checkbox label:before {\\n            content: '';\\n            position: absolute;\\n            left: 0;\\n            top: 0;\\n            margin: 4px;\\n            width: 22px;\\n            height: 22px;\\n            transition: transform 0.28s ease;\\n            border-radius: 3px;\\n            border: 2px solid #E5E5E5;\\n            background: #fff;\\n        }\\n        .checkbox label:after {\\n          content: '';\\n            display: block;\\n            width: 10px;\\n            height: 5px;\\n            border-bottom: 2px solid #000;\\n            border-left: 2px solid #000;\\n            -webkit-transform: rotate(-45deg) scale(0);\\n            transform: rotate(-45deg) scale(0);\\n            transition: transform ease 0.25s;\\n            will-change: transform;\\n            position: absolute;\\n            top: 12px;\\n            left: 10px;\\n        }\\n        .checkbox input[type=\\\"checkbox\\\"]:checked ~ label::before {\\n            background: \".concat(checkBoxColorHexColor, \";\\n            color: #000;\\n        }\\n\\n        .checkbox input[type=\\\"checkbox\\\"]:checked ~ label::after {\\n            -webkit-transform: rotate(-45deg) scale(1);\\n            transform: rotate(-45deg) scale(1);\\n        }\\n        .checkbox label {\\n            min-height: 34px;\\n            display: block;\\n            padding-left: 38px;\\n            margin-bottom: 0;\\n            font-weight: normal;\\n            cursor: pointer;\\n            vertical-align: sub;\\n        }\\n        .checkbox label span {\\n            position: absolute;\\n            top: 50%;\\n            -webkit-transform: translateY(-50%);\\n            transform: translateY(-50%);\\n        }\\n        .checkbox input[type=\\\"checkbox\\\"]:focus + label::before {\\n            outline: 0;\\n        }\\n        </style>\\n        <div style=\\\"width: 400px; height: 115px; background: #F4EEED;border-radius: 4px;font-family: Montserrat, sans-serif;font-feature-settings: 'pnum' on, 'lnum' on;font-size: 16px;\\\">\\n            <div style=\\\"position:relative; height: 24px; left: 16px; right: 180px; top: 13px;font-weight: 600;line-height: 24px; color: #1F1E2C;\\\"> \\n                Get it tailored for free with \\n                <img src=\\\"https://merchant.hemster.co/faherty/hemsterlogo.png\\\" style=\\\"position:relative;top: 6px;\\\"></img>\\n            </div>\\n            <div style=\\\"position: relative;height: 16px;left: 13px;right: 12px;top: 20px;\\\">\\n\\n            <div class=\\\"checkbox\\\">\\n                <input type=\\\"checkbox\\\" id=\\\"hemster_installation\\\" >\\n                <label for=\\\"hemster_installation\\\">\\n                    <span>\\n                        Add a FitKit\\n                    </span>\\n                </lable>\\n            </div>\\n\\n            </div>\\n            <div class=\\\"lm-link\\\">Learn More</div>\\n        </div>\");\n  var previewHTML = \"<style>\\n        .pdp-page{\\n          height: 75px;\\n          font-family: Montserrat, sans-serif;\\n          font-feature-settings: 'pnum' on, 'lnum' on;\\n          font-size: \".concat(fontSize, \"px !important;\\n        }\\n\\n        .hemster_installation{\\n          color:\").concat(FontColorHexColor, \";\\n          font-family:\").concat(selected, \"\\n        }\\n\\n        .lm-link{\\n          position: relative;\\n          height: 24px;\\n          left: 36px;\\n          top: 10px;\\n          line-height: 24px;\\n          text-decoration-line: underline;\\n          color: \").concat(LinkColorHexColor, \";\\n          font-size:\").concat(linkSize, \"px;\\n          cursor:pointer\\n        }\\n        .checkbox {\\n            width: 100%;\\n            position: relative;\\n            display: block;\\n        }\\n        \\n        .checkbox input[type=\\\"checkbox\\\"] {\\n            width: auto;\\n            opacity: 0.00000001;\\n            position: absolute;\\n            left: 0;\\n            margin-left: -20px;\\n        }\\n        .checkbox label {\\n            position: relative;\\n        }\\n        .checkbox label:before {\\n            content: '';\\n            position: absolute;\\n            left: 0;\\n            top: 0;\\n            margin: 4px;\\n            width: 22px;\\n            height: 22px;\\n            transition: transform 0.28s ease;\\n            border-radius: 3px;\\n            // border: 2px solid #E5E5E5;\\n            border: 2px solid \").concat(checkBoxColorHexColor, \";\\n            background: #fff;\\n        }\\n        .checkbox label:after {\\n          content: '';\\n            display: block;\\n            width: 10px;\\n            height: 5px;\\n            border-bottom: 2px solid \").concat(FontColorHexColor, \";\\n            border-left: 2px solid \").concat(FontColorHexColor, \";\\n            -webkit-transform: rotate(-45deg) scale(0);\\n            transform: rotate(-45deg) scale(0);\\n            transition: transform ease 0.25s;\\n            will-change: transform;\\n            position: absolute;\\n            top: 12px;\\n            left: 10px;\\n        }\\n        .checkbox input[type=\\\"checkbox\\\"]:checked ~ label::before {\\n            color: #000;\\n        }\\n\\n        .checkbox input[type=\\\"checkbox\\\"]:checked ~ label::after {\\n            -webkit-transform: rotate(-45deg) scale(1);\\n            transform: rotate(-45deg) scale(1);\\n        }\\n        .checkbox label {\\n            min-height: 26px;\\n            display: block;\\n            padding-left: 36px;\\n            margin-bottom: 0;\\n            font-weight: normal;\\n            cursor: pointer;\\n            vertical-align: sub;\\n        }\\n        .checkbox label span {\\n            position: absolute;\\n            top: 50%;\\n            -webkit-transform: translateY(-50%);\\n            transform: translateY(-50%);\\n        }\\n        .checkbox input[type=\\\"checkbox\\\"]:focus + label::before {\\n            outline: 0;\\n        }\\n        </style>\\n        \\n        <div class=\\\"pdp-page\\\">\\n            <div style=\\\"position:relative; height: 24px; left: 0px; right: 180px; top: 6px;font-weight: 600;line-height: 24px; color: #1F1E2C;\\\"> \\n\\n            <div class=\\\"checkbox\\\">\\n\\n                <input type=\\\"checkbox\\\" id=\\\"hemster_installation\\\" />\\n                <label for=\\\"hemster_installation\\\" class=\\\"hemster_installation\\\">\\n                    <span>Get it tailored for free with <img src=\\\"https://merchant.hemster.co/faherty/hemsterlogo.png\\\" style=\\\"position:relative;top: 6px;\\\"></img><span>\\n                </label>\\n\\n            </div>\\n\\n            <div class=\\\"lm-link\\\">Learn More</div>\\n        </div>\");\n  var previewHTML2 = \"<style>\\n        .checkbox {\\n            width: 100%;\\n            position: relative;\\n            display: block;\\n        }\\n        \\n        .checkbox input[type=\\\"checkbox\\\"] {\\n            width: auto;\\n            opacity: 0.00000001;\\n            position: absolute;\\n            left: 0;\\n            margin-left: -20px;\\n        }\\n        .checkbox label {\\n            position: relative;\\n        }\\n        .checkbox label:before {\\n            content: '';\\n            position: absolute;\\n            left: 0;\\n            top: 0;\\n            margin: 4px;\\n            width: 22px;\\n            height: 22px;\\n            transition: transform 0.28s ease;\\n            border-radius: 3px;\\n            border: 2px solid #E5E5E5;\\n            background: #fff;\\n        }\\n        .checkbox label:after {\\n          content: '';\\n            display: block;\\n            width: 10px;\\n            height: 5px;\\n            border-bottom: 2px solid #000;\\n            border-left: 2px solid #000;\\n            -webkit-transform: rotate(-45deg) scale(0);\\n            transform: rotate(-45deg) scale(0);\\n            transition: transform ease 0.25s;\\n            will-change: transform;\\n            position: absolute;\\n            top: 12px;\\n            left: 10px;\\n        }\\n        .checkbox input[type=\\\"checkbox\\\"]:checked ~ label::before {\\n            color: #000;\\n        }\\n\\n        .checkbox input[type=\\\"checkbox\\\"]:checked ~ label::after {\\n            -webkit-transform: rotate(-45deg) scale(1);\\n            transform: rotate(-45deg) scale(1);\\n        }\\n        .checkbox label {\\n            min-height: 26px;\\n            display: block;\\n            padding-left: 36px;\\n            margin-bottom: 0;\\n            font-weight: normal;\\n            cursor: pointer;\\n            vertical-align: sub;\\n        }\\n        .checkbox label span {\\n            position: absolute;\\n            top: 50%;\\n            -webkit-transform: translateY(-50%);\\n            transform: translateY(-50%);\\n        }\\n        .checkbox input[type=\\\"checkbox\\\"]:focus + label::before {\\n            outline: 0;\\n        }\\n        </style>\\n        \\n        <div style=\\\"width: 400px; height: 75px;font-family: Montserrat, sans-serif;font-feature-settings: 'pnum' on, 'lnum' on;font-size: 16px;\\\">\\n            <div style=\\\"position:relative; height: 24px; left: 0px; right: 180px; top: 6px;font-weight: 600;line-height: 24px; color: #1F1E2C;\\\"> \\n\\n            <div class=\\\"checkbox\\\">\\n\\n                <input type=\\\"checkbox\\\" id=\\\"hemster_installation\\\" />\\n                <label for=\\\"hemster_installation\\\">\\n                    <span>Get it tailored for free with <img src=\\\"https://merchant.hemster.co/faherty/hemsterlogo.png\\\" style=\\\"position:relative;top: 6px;\\\"></img><span>\\n                </label>\\n\\n            </div>\\n\\n            <div style=\\\"position: relative;height: 24px;left: 36px;top: 18px;line-height: 24px;text-decoration-line: underline;color: #C1ACA4;cursor:pointer\\\">Learn More</div>\\n        </div>\";\n\n  var settingOption1 = /*#__PURE__*/_jsx(Card, {\n    sectioned: true,\n    children: /*#__PURE__*/_jsx(Form, {\n      children: /*#__PURE__*/_jsxs(FormLayout, {\n        children: [/*#__PURE__*/_jsxs(FormLayout.Group, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(TextField, {\n              label: \"Font Size\",\n              onChange: function onChange(val) {\n                setFontSize(val);\n              },\n              value: fontSize,\n              type: \"number\",\n              min: 0,\n              suffix: \"px\"\n            })\n          }), /*#__PURE__*/_jsxs(Popover, {\n            active: popoverActiveFontColor,\n            activator: activatorFontColor,\n            onClose: togglePopoverActiveFontColor,\n            children: [/*#__PURE__*/_jsx(Popover.Section, {\n              children: /*#__PURE__*/_jsx(ColorPicker, {\n                onChange: handleFontColorChange,\n                color: FontColor\n              })\n            }), /*#__PURE__*/_jsx(Popover.Section, {\n              children: /*#__PURE__*/_jsx(TextField, {\n                value: FontColorHexColor,\n                label: \"\",\n                type: \"text\",\n                id: \"FontColorHexColor\",\n                onChange: handleFontColorHexColorChange\n              })\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(FormLayout.Group, {\n          children: [/*#__PURE__*/_jsx(Select, {\n            label: \"Font style\",\n            placeholder: \"Select\",\n            options: options,\n            onChange: handleSelectChange,\n            value: selected\n          }), /*#__PURE__*/_jsxs(Popover, {\n            active: popoverActiveBGColor,\n            activator: activatorBGColor,\n            onClose: togglePopoverActiveCheckBoxColor,\n            children: [/*#__PURE__*/_jsx(Popover.Section, {\n              children: /*#__PURE__*/_jsx(ColorPicker, {\n                onChange: handleBGColorChange,\n                color: BGColor\n              })\n            }), /*#__PURE__*/_jsx(Popover.Section, {\n              children: /*#__PURE__*/_jsx(TextField, {\n                value: checkBoxColorHexColor,\n                label: \"\",\n                type: \"text\",\n                id: \"checkBoxColorHexColor\",\n                onChange: handlecheckBoxColorHexColorChange\n              })\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(FormLayout.Group, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(TextField, {\n              label: \"Link Size\",\n              onChange: function onChange(val) {\n                setLinkSize(val);\n              },\n              value: linkSize,\n              type: \"number\",\n              min: 0,\n              suffix: \"px\"\n            })\n          }), /*#__PURE__*/_jsxs(Popover, {\n            active: popoverActiveLinkColor,\n            activator: activatorLinkColor,\n            onClose: togglePopoverActiveLinkColor,\n            children: [/*#__PURE__*/_jsx(Popover.Section, {\n              children: /*#__PURE__*/_jsx(ColorPicker, {\n                onChange: handleLinkColorChange,\n                color: LinkColor\n              })\n            }), /*#__PURE__*/_jsx(Popover.Section, {\n              children: /*#__PURE__*/_jsx(TextField, {\n                value: LinkColorHexColor,\n                label: \"\",\n                type: \"text\",\n                id: \"LinkColorHexColor\",\n                onChange: handleLinkColorHexColorChange\n              })\n            })]\n          })]\n        })]\n      })\n    })\n  });\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [isLoading ? /*#__PURE__*/_jsx(\"div\", {\n      className: \"setting-spinner\",\n      children: /*#__PURE__*/_jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\"\n      })\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsx(\"br\", {}), !isEdit ? /*#__PURE__*/_jsx(\"div\", {\n          className: \"edit-style-btn\",\n          children: /*#__PURE__*/_jsx(Button, {\n            onClick: function onClick() {\n              return setIsEdit(true);\n            },\n            outline: true,\n            children: \"Edit Style\"\n          })\n        }) : /*#__PURE__*/_jsx(Page, {\n          fullWidth: true,\n          title: \"Edit style\",\n          breadcrumbs: [{\n            content: \"settings\",\n            onAction: function onAction() {\n              return setIsEdit(false);\n            }\n          }],\n          children: settingOption1\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Page, {\n          children: /*#__PURE__*/_jsxs(Card, {\n            sectioned: true,\n            children: [/*#__PURE__*/_jsx(TextStyle, {\n              children: \"Preview:\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: previewHTML\n              }\n            })]\n          })\n        }), /*#__PURE__*/_jsx(FormLayout, {\n          children: /*#__PURE__*/_jsx(\"br\", {})\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"action-btns\",\n        children: /*#__PURE__*/_jsx(PageActions, {\n          primaryAction: {\n            content: \"Save\",\n            // disabled: isLoading,\n            onAction: handleProductSettingSave\n          },\n          secondaryActions: [{\n            content: \"Cancel\",\n            destructive: true,\n            onAction: getProductSettings\n          }]\n        })\n      })]\n    }), isLoading && /*#__PURE__*/_jsx(Loading, {}), toastMarkup]\n  });\n}\n\nexport default Product;","map":null,"metadata":{},"sourceType":"module"}